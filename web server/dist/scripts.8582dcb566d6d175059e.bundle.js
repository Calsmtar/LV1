webpackJsonp([2],{3:function(n,r,e){n.exports=e("3xEg")},"3xEg":function(n,r,e){e("KF6U")(e("bgFB"))},KF6U:function(n,r){n.exports=function(n){"undefined"!=typeof execScript?execScript(n):eval.call(null,n)}},bgFB:function(n,r){n.exports="(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.nipplejs = f()}})(function(){var define,module,exports;\r\n'use strict';\r\n\r\n// Constants\r\nvar isTouch = !!('ontouchstart' in window);\r\nvar isPointer = window.PointerEvent ? true : false;\r\nvar isMSPointer = window.MSPointerEvent ? true : false;\r\nvar events = {\r\n    touch: {\r\n        start: 'touchstart',\r\n        move: 'touchmove',\r\n        end: 'touchend'\r\n    },\r\n    mouse: {\r\n        start: 'mousedown',\r\n        move: 'mousemove',\r\n        end: 'mouseup'\r\n    },\r\n    pointer: {\r\n        start: 'pointerdown',\r\n        move: 'pointermove',\r\n        end: 'pointerup'\r\n    },\r\n    MSPointer: {\r\n        start: 'MSPointerDown',\r\n        move: 'MSPointerMove',\r\n        end: 'MSPointerUp'\r\n    }\r\n};\r\nvar toBind;\r\nvar secondBind = {};\r\nif (isPointer) {\r\n    toBind = events.pointer;\r\n} else if (isMSPointer) {\r\n    toBind = events.MSPointer;\r\n} else if (isTouch) {\r\n    toBind = events.touch;\r\n    secondBind = events.mouse;\r\n} else {\r\n    toBind = events.mouse;\r\n}\r\n///////////////////////\r\n///      UTILS      ///\r\n///////////////////////\r\n\r\nvar u = {};\r\nu.distance = function (p1, p2) {\r\n    var dx = p2.x - p1.x;\r\n    var dy = p2.y - p1.y;\r\n\r\n    return Math.sqrt((dx * dx) + (dy * dy));\r\n};\r\n\r\nu.angle = function(p1, p2) {\r\n    var dx = p2.x - p1.x;\r\n    var dy = p2.y - p1.y;\r\n\r\n    return u.degrees(Math.atan2(dy, dx));\r\n};\r\n\r\nu.findCoord = function(p, d, a) {\r\n    var b = {x: 0, y: 0};\r\n    a = u.radians(a);\r\n    b.x = p.x - d * Math.cos(a);\r\n    b.y = p.y - d * Math.sin(a);\r\n    return b;\r\n};\r\n\r\nu.radians = function(a) {\r\n    return a * (Math.PI / 180);\r\n};\r\n\r\nu.degrees = function(a) {\r\n    return a * (180 / Math.PI);\r\n};\r\n\r\nu.bindEvt = function (el, type, handler) {\r\n    if (el.addEventListener) {\r\n        el.addEventListener(type, handler, false);\r\n    } else if (el.attachEvent) {\r\n        el.attachEvent(type, handler);\r\n    }\r\n};\r\n\r\nu.unbindEvt = function (el, type, handler) {\r\n    if (el.removeEventListener) {\r\n        el.removeEventListener(type, handler);\r\n    } else if (el.detachEvent) {\r\n        el.detachEvent(type, handler);\r\n    }\r\n};\r\n\r\nu.trigger = function (el, type, data) {\r\n    var evt = new CustomEvent(type, data);\r\n    el.dispatchEvent(evt);\r\n};\r\n\r\nu.prepareEvent = function (evt) {\r\n    evt.preventDefault();\r\n    return evt.type.match(/^touch/) ? evt.changedTouches : evt;\r\n};\r\n\r\nu.getScroll = function () {\r\n    var x = (window.pageXOffset !== undefined) ?\r\n        window.pageXOffset :\r\n        (document.documentElement || document.body.parentNode || document.body)\r\n            .scrollLeft;\r\n\r\n    var y = (window.pageYOffset !== undefined) ?\r\n        window.pageYOffset :\r\n        (document.documentElement || document.body.parentNode || document.body)\r\n            .scrollTop;\r\n    return {\r\n        x: x,\r\n        y: y\r\n    };\r\n};\r\n\r\nu.applyPosition = function (el, pos) {\r\n    if (pos.x && pos.y) {\r\n        el.style.left = pos.x + 'px';\r\n        el.style.top = pos.y + 'px';\r\n    } else if (pos.top || pos.right || pos.bottom || pos.left) {\r\n        el.style.top = pos.top;\r\n        el.style.right = pos.right;\r\n        el.style.bottom = pos.bottom;\r\n        el.style.left = pos.left;\r\n    }\r\n};\r\n\r\nu.getTransitionStyle = function (property, values, time) {\r\n    var obj = u.configStylePropertyObject(property);\r\n    for (var i in obj) {\r\n        if (obj.hasOwnProperty(i)) {\r\n            if (typeof values === 'string') {\r\n                obj[i] = values + ' ' + time;\r\n            } else {\r\n                var st = '';\r\n                for (var j = 0, max = values.length; j < max; j += 1) {\r\n                    st += values[j] + ' ' + time + ', ';\r\n                }\r\n                obj[i] = st.slice(0, -2);\r\n            }\r\n        }\r\n    }\r\n    return obj;\r\n};\r\n\r\nu.getVendorStyle = function (property, value) {\r\n    var obj = u.configStylePropertyObject(property);\r\n    for (var i in obj) {\r\n        if (obj.hasOwnProperty(i)) {\r\n            obj[i] = value;\r\n        }\r\n    }\r\n    return obj;\r\n};\r\n\r\nu.configStylePropertyObject = function (prop) {\r\n    var obj = {};\r\n    obj[prop] = '';\r\n    var vendors = ['webkit', 'Moz', 'o'];\r\n    vendors.forEach(function (vendor) {\r\n        obj[vendor + prop.charAt(0).toUpperCase() + prop.slice(1)] = '';\r\n    });\r\n    return obj;\r\n};\r\n\r\nu.extend = function (objA, objB) {\r\n    for (var i in objB) {\r\n        if (objB.hasOwnProperty(i)) {\r\n            objA[i] = objB[i];\r\n        }\r\n    }\r\n    return objA;\r\n};\r\n\r\n// Overwrite only what's already present\r\nu.safeExtend = function (objA, objB) {\r\n    var obj = {};\r\n    for (var i in objA) {\r\n        if (objA.hasOwnProperty(i) && objB.hasOwnProperty(i)) {\r\n            obj[i] = objB[i];\r\n        } else if (objA.hasOwnProperty(i)) {\r\n            obj[i] = objA[i];\r\n        }\r\n    }\r\n    return obj;\r\n};\r\n\r\n// Map for array or unique item.\r\nu.map = function (ar, fn) {\r\n    if (ar.length) {\r\n        for (var i = 0, max = ar.length; i < max; i += 1) {\r\n            fn(ar[i]);\r\n        }\r\n    } else {\r\n        fn(ar);\r\n    }\r\n};\r\n///////////////////////\r\n///   SUPER CLASS   ///\r\n///////////////////////\r\n\r\nfunction Super () {};\r\n\r\n// Basic event system.\r\nSuper.prototype.on = function (arg, cb) {\r\n    var self = this;\r\n    var types = arg.split(/[ ,]+/g);\r\n    var type;\r\n    self._handlers_ = self._handlers_ || {};\r\n\r\n    for (var i = 0; i < types.length; i += 1) {\r\n        type = types[i];\r\n        self._handlers_[type] = self._handlers_[type] || [];\r\n        self._handlers_[type].push(cb);\r\n    }\r\n    return self;\r\n};\r\n\r\nSuper.prototype.off = function (type, cb) {\r\n    var self = this;\r\n    self._handlers_ = self._handlers_ || {};\r\n\r\n    if (type === undefined) {\r\n        self._handlers_ = {};\r\n    } else if (cb === undefined) {\r\n        self._handlers_[type] = null;\r\n    } else if (self._handlers_[type] &&\r\n            self._handlers_[type].indexOf(cb) >= 0) {\r\n        self._handlers_[type].splice(self._handlers_[type].indexOf(cb), 1);\r\n    }\r\n\r\n    return self;\r\n};\r\n\r\nSuper.prototype.trigger = function (arg, data) {\r\n    var self = this;\r\n    var types = arg.split(/[ ,]+/g);\r\n    var type;\r\n    self._handlers_ = self._handlers_ || {};\r\n\r\n    for (var i = 0; i < types.length; i += 1) {\r\n        type = types[i];\r\n        if (self._handlers_[type] && self._handlers_[type].length) {\r\n            self._handlers_[type].forEach(function (handler) {\r\n                handler.call(self, {\r\n                    type: type,\r\n                    target: self\r\n                }, data);\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n// Configuration\r\nSuper.prototype.config = function (options) {\r\n    var self = this;\r\n    self.options = self.defaults || {};\r\n    if (options) {\r\n        self.options = u.safeExtend(self.options, options);\r\n    }\r\n};\r\n\r\n// Bind internal events.\r\nSuper.prototype.bindEvt = function (el, type) {\r\n    var self = this;\r\n    self._domHandlers_ = self._domHandlers_ || {};\r\n\r\n    self._domHandlers_[type] = function () {\r\n        if (typeof self['on' + type] === 'function') {\r\n            self['on' + type].apply(self, arguments);\r\n        } else {\r\n            console.warn('[WARNING] : Missing \"on' + type + '\" handler.');\r\n        }\r\n    };\r\n\r\n    u.bindEvt(el, toBind[type], self._domHandlers_[type]);\r\n\r\n    if (secondBind[type]) {\r\n        // Support for both touch and mouse at the same time.\r\n        u.bindEvt(el, secondBind[type], self._domHandlers_[type]);\r\n    }\r\n\r\n    return self;\r\n};\r\n\r\n// Unbind dom events.\r\nSuper.prototype.unbindEvt = function (el, type) {\r\n    var self = this;\r\n    self._domHandlers_ = self._domHandlers_ || {};\r\n\r\n    u.unbindEvt(el, toBind[type], self._domHandlers_[type]);\r\n\r\n    if (secondBind[type]) {\r\n        // Support for both touch and mouse at the same time.\r\n        u.unbindEvt(el, secondBind[type], self._domHandlers_[type]);\r\n    }\r\n\r\n    delete self._domHandlers_[type];\r\n\r\n    return this;\r\n};\r\n///////////////////////\r\n///   THE NIPPLE    ///\r\n///////////////////////\r\n\r\nfunction Nipple (collection, options) {\r\n    this.identifier = options.identifier;\r\n    this.position = options.position;\r\n    this.frontPosition = options.frontPosition;\r\n    this.collection = collection;\r\n\r\n    // Defaults\r\n    this.defaults = {\r\n        size: 100,\r\n        threshold: 0.1,\r\n        color: 'white',\r\n        fadeTime: 250,\r\n        dataOnly: false,\r\n        restOpacity: 0.5,\r\n        mode: 'dynamic',\r\n        zone: document.body\r\n    };\r\n\r\n    this.config(options);\r\n\r\n    // Overwrites\r\n    if (this.options.mode === 'dynamic') {\r\n        this.options.restOpacity = 0;\r\n    }\r\n\r\n    this.id = Nipple.id;\r\n    Nipple.id += 1;\r\n    this.buildEl()\r\n        .stylize();\r\n\r\n    // Nipple's API.\r\n    this.instance = {\r\n        el: this.ui.el,\r\n        on: this.on.bind(this),\r\n        off: this.off.bind(this),\r\n        show: this.show.bind(this),\r\n        hide: this.hide.bind(this),\r\n        add: this.addToDom.bind(this),\r\n        remove: this.removeFromDom.bind(this),\r\n        destroy: this.destroy.bind(this),\r\n        resetDirection: this.resetDirection.bind(this),\r\n        computeDirection: this.computeDirection.bind(this),\r\n        trigger: this.trigger.bind(this),\r\n        position: this.position,\r\n        frontPosition: this.frontPosition,\r\n        ui: this.ui,\r\n        identifier: this.identifier,\r\n        id: this.id,\r\n        options: this.options\r\n    };\r\n\r\n    return this.instance;\r\n};\r\n\r\nNipple.prototype = new Super();\r\nNipple.constructor = Nipple;\r\nNipple.id = 0;\r\n\r\n// Build the dom element of the Nipple instance.\r\nNipple.prototype.buildEl = function (options) {\r\n    this.ui = {};\r\n\r\n    if (this.options.dataOnly) {\r\n        return this;\r\n    }\r\n\r\n    this.ui.el = document.createElement('div');\r\n    this.ui.back = document.createElement('div');\r\n    this.ui.front = document.createElement('div');\r\n\r\n    this.ui.el.className = 'nipple collection_' + this.collection.id;\r\n    this.ui.back.className = 'back';\r\n    this.ui.front.className = 'front';\r\n\r\n    this.ui.el.setAttribute('id', 'nipple_' + this.collection.id +\r\n        '_' + this.id);\r\n\r\n    this.ui.el.appendChild(this.ui.back);\r\n    this.ui.el.appendChild(this.ui.front);\r\n\r\n    return this;\r\n};\r\n\r\n// Apply CSS to the Nipple instance.\r\nNipple.prototype.stylize = function () {\r\n    if (this.options.dataOnly) {\r\n        return this;\r\n    }\r\n    var animTime = this.options.fadeTime + 'ms';\r\n    var borderStyle = u.getVendorStyle('borderRadius', '50%');\r\n    var transitStyle = u.getTransitionStyle('transition', 'opacity', animTime);\r\n    var styles = {};\r\n    styles.el = {\r\n        position: 'absolute',\r\n        opacity: this.options.restOpacity,\r\n        display: 'block',\r\n        'zIndex': 999\r\n    };\r\n\r\n    styles.back = {\r\n        position: 'absolute',\r\n        display: 'block',\r\n        width: this.options.size + 'px',\r\n        height: this.options.size + 'px',\r\n        marginLeft: -this.options.size / 2 + 'px',\r\n        marginTop: -this.options.size / 2 + 'px',\r\n        background: this.options.color,\r\n        'opacity': '.5'\r\n    };\r\n\r\n    styles.front = {\r\n        width: this.options.size / 2 + 'px',\r\n        height: this.options.size / 2 + 'px',\r\n        position: 'absolute',\r\n        display: 'block',\r\n        marginLeft: -this.options.size / 4 + 'px',\r\n        marginTop: -this.options.size / 4 + 'px',\r\n        background: this.options.color,\r\n        'opacity': '.5'\r\n    };\r\n\r\n    u.extend(styles.el, transitStyle);\r\n    u.extend(styles.back, borderStyle);\r\n    u.extend(styles.front, borderStyle);\r\n\r\n    this.applyStyles(styles);\r\n\r\n    return this;\r\n};\r\n\r\nNipple.prototype.applyStyles = function (styles) {\r\n    // Apply styles\r\n    for (var i in this.ui) {\r\n        if (this.ui.hasOwnProperty(i)) {\r\n            for (var j in styles[i]) {\r\n                this.ui[i].style[j] = styles[i][j];\r\n            }\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n// Inject the Nipple instance into DOM.\r\nNipple.prototype.addToDom = function () {\r\n    // We're not adding it if we're dataOnly or already in dom.\r\n    if (this.options.dataOnly || document.body.contains(this.ui.el)) {\r\n        return this;\r\n    }\r\n    this.options.zone.appendChild(this.ui.el);\r\n    return this;\r\n};\r\n\r\n// Remove the Nipple instance from DOM.\r\nNipple.prototype.removeFromDom = function () {\r\n    if (this.options.dataOnly || !document.body.contains(this.ui.el)) {\r\n        return this;\r\n    }\r\n    this.options.zone.removeChild(this.ui.el);\r\n    return this;\r\n};\r\n\r\n// Entirely destroy this nipple\r\nNipple.prototype.destroy = function () {\r\n    clearTimeout(this.removeTimeout);\r\n    clearTimeout(this.showTimeout);\r\n    clearTimeout(this.restTimeout);\r\n    this.trigger('destroyed', this.instance);\r\n    this.removeFromDom();\r\n    this.off();\r\n};\r\n\r\n// Fade in the Nipple instance.\r\nNipple.prototype.show = function (cb) {\r\n    var self = this;\r\n\r\n    if (self.options.dataOnly) {\r\n        return self;\r\n    }\r\n\r\n    clearTimeout(self.removeTimeout);\r\n    clearTimeout(self.showTimeout);\r\n    clearTimeout(self.restTimeout);\r\n\r\n    self.addToDom();\r\n\r\n    self.restCallback();\r\n\r\n    setTimeout(function () {\r\n        self.ui.el.style.opacity = 1;\r\n    }, 0);\r\n\r\n    self.showTimeout = setTimeout(function () {\r\n        self.trigger('shown', self.instance);\r\n        if (typeof cb === 'function') {\r\n            cb.call(this);\r\n        }\r\n    }, self.options.fadeTime);\r\n\r\n    return self;\r\n};\r\n\r\n// Fade out the Nipple instance.\r\nNipple.prototype.hide = function (cb) {\r\n    var self = this;\r\n\r\n    if (self.options.dataOnly) {\r\n        return self;\r\n    }\r\n\r\n    self.ui.el.style.opacity = self.options.restOpacity;\r\n\r\n    clearTimeout(self.removeTimeout);\r\n    clearTimeout(self.showTimeout);\r\n    clearTimeout(self.restTimeout);\r\n\r\n    self.removeTimeout = setTimeout(\r\n        function () {\r\n            var display = self.options.mode === 'dynamic' ? 'none' : 'block';\r\n            self.ui.el.style.display = display;\r\n            if (typeof cb === 'function') {\r\n                cb.call(self);\r\n            }\r\n\r\n            self.trigger('hidden', self.instance);\r\n        },\r\n        self.options.fadeTime\r\n    );\r\n    self.restPosition();\r\n\r\n    return self;\r\n};\r\n\r\nNipple.prototype.restPosition = function (cb) {\r\n    var self = this;\r\n    self.frontPosition = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n    var animTime = self.options.fadeTime + 'ms';\r\n\r\n    var transitStyle = {};\r\n    transitStyle.front = u.getTransitionStyle('transition',\r\n        ['top', 'left'], animTime);\r\n\r\n    var styles = {front: {}};\r\n    styles.front = {\r\n        left: self.frontPosition.x + 'px',\r\n        top: self.frontPosition.y + 'px'\r\n    };\r\n\r\n    self.applyStyles(transitStyle);\r\n    self.applyStyles(styles);\r\n\r\n    self.restTimeout = setTimeout(\r\n        function () {\r\n            if (typeof cb === 'function') {\r\n                cb.call(self);\r\n            }\r\n            self.restCallback();\r\n        },\r\n        self.options.fadeTime\r\n    );\r\n};\r\n\r\nNipple.prototype.restCallback = function () {\r\n    var self = this;\r\n    var transitStyle = {};\r\n    transitStyle.front = u.getTransitionStyle('transition', 'none', '');\r\n    self.applyStyles(transitStyle);\r\n    self.trigger('rested', self.instance);\r\n};\r\n\r\nNipple.prototype.resetDirection = function () {\r\n    // Fully rebuild the object to let the iteration possible.\r\n    this.direction = {\r\n        x: false,\r\n        y: false,\r\n        angle: false\r\n    };\r\n};\r\n\r\nNipple.prototype.computeDirection = function (obj) {\r\n    var rAngle = obj.angle.radian;\r\n    var angle45 = Math.PI / 4;\r\n    var angle90 = Math.PI / 2;\r\n    var direction, directionX, directionY;\r\n\r\n    // Angular direction\r\n    //     \\  UP /\r\n    //      \\   /\r\n    // LEFT       RIGHT\r\n    //      /   \\\r\n    //     /DOWN \\\r\n    //\r\n    if (rAngle > angle45 && rAngle < (angle45 * 3)) {\r\n        direction = 'up';\r\n    } else if (rAngle > -angle45 && rAngle <= angle45) {\r\n        direction = 'left';\r\n    } else if (rAngle > (-angle45 * 3) && rAngle <= -angle45) {\r\n        direction = 'down';\r\n    } else {\r\n        direction = 'right';\r\n    }\r\n\r\n    // Plain direction\r\n    //    UP                 |\r\n    // _______               | RIGHT\r\n    //                  LEFT |\r\n    //   DOWN                |\r\n    if (rAngle > -angle90 && rAngle < angle90) {\r\n        directionX = 'left';\r\n    } else {\r\n        directionX = 'right';\r\n    }\r\n\r\n    if (rAngle > 0) {\r\n        directionY = 'up';\r\n    } else {\r\n        directionY = 'down';\r\n    }\r\n\r\n    if (obj.force > this.options.threshold) {\r\n        var oldDirection = {};\r\n        for (var i in this.direction) {\r\n            if (this.direction.hasOwnProperty(i)) {\r\n                oldDirection[i] = this.direction[i];\r\n            }\r\n        }\r\n\r\n        var same = {};\r\n\r\n        this.direction = {\r\n            x: directionX,\r\n            y: directionY,\r\n            angle: direction\r\n        };\r\n\r\n        obj.direction = this.direction;\r\n\r\n        for (var i in oldDirection) {\r\n            if (oldDirection[i] === this.direction[i]) {\r\n                same[i] = true;\r\n            }\r\n        }\r\n\r\n        // If all 3 directions are the same, we don't trigger anything.\r\n        if (same.x && same.y && same.angle) {\r\n            return obj;\r\n        }\r\n\r\n        if (!same.x || !same.y) {\r\n            this.trigger('plain', obj);\r\n        }\r\n\r\n        if (!same.x) {\r\n            this.trigger('plain:' + directionX, obj);\r\n        }\r\n\r\n        if (!same.y) {\r\n            this.trigger('plain:' + directionY, obj);\r\n        }\r\n\r\n        if (!same.angle) {\r\n            this.trigger('dir dir:' + direction, obj);\r\n        }\r\n    }\r\n    return obj;\r\n};\r\n/* global Nipple, Super */\r\n\r\n///////////////////////////\r\n///   THE COLLECTION    ///\r\n///////////////////////////\r\n\r\nfunction Collection (manager, options) {\r\n    var self = this;\r\n    self.nipples = [];\r\n    self.idles = [];\r\n    self.actives = [];\r\n    self.ids = [];\r\n    self.pressureIntervals = {};\r\n    self.manager = manager;\r\n    self.id = Collection.id;\r\n    Collection.id += 1;\r\n\r\n    // Defaults\r\n    self.defaults = {\r\n        zone: document.body,\r\n        multitouch: false,\r\n        maxNumberOfNipples: 10,\r\n        mode: 'dynamic',\r\n        position: {top: 0, left: 0},\r\n        catchDistance: 200,\r\n        size: 100,\r\n        threshold: 0.1,\r\n        color: 'white',\r\n        fadeTime: 250,\r\n        dataOnly: false,\r\n        restOpacity: 0.5\r\n    };\r\n\r\n    self.config(options);\r\n\r\n    // Overwrites\r\n    if (self.options.mode === 'static' || self.options.mode === 'semi') {\r\n        self.options.multitouch = false;\r\n    }\r\n\r\n    if (!self.options.multitouch) {\r\n        self.options.maxNumberOfNipples = 1;\r\n    }\r\n\r\n    self.updateBox();\r\n    self.prepareNipples();\r\n    self.bindings();\r\n    self.begin();\r\n\r\n    return self.nipples;\r\n}\r\n\r\nCollection.prototype = new Super();\r\nCollection.constructor = Collection;\r\nCollection.id = 0;\r\n\r\nCollection.prototype.prepareNipples = function () {\r\n    var self = this;\r\n    var nips = self.nipples;\r\n\r\n    // Public API Preparation.\r\n    nips.on = self.on.bind(self);\r\n    nips.off = self.off.bind(self);\r\n    nips.options = self.options;\r\n    nips.destroy = self.destroy.bind(self);\r\n    nips.ids = self.ids;\r\n    nips.id = self.id;\r\n    nips.processOnMove = self.processOnMove.bind(self);\r\n    nips.processOnEnd = self.processOnEnd.bind(self);\r\n    nips.get = function (id) {\r\n        if (id === undefined) {\r\n            return nips[0];\r\n        }\r\n        for (var i = 0, max = nips.length; i < max; i += 1) {\r\n            if (nips[i].identifier === id) {\r\n                return nips[i];\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n};\r\n\r\nCollection.prototype.bindings = function () {\r\n    var self = this;\r\n    // Touch start event.\r\n    self.bindEvt(self.options.zone, 'start');\r\n    // Avoid native touch actions (scroll, zoom etc...) on the zone.\r\n    self.options.zone.style.touchAction = 'none';\r\n    self.options.zone.style.msTouchAction = 'none';\r\n};\r\n\r\nCollection.prototype.begin = function () {\r\n    var self = this;\r\n    var opts = self.options;\r\n\r\n    // We place our static nipple\r\n    // if needed.\r\n    if (opts.mode === 'static') {\r\n        var nipple = self.createNipple(\r\n            opts.position,\r\n            self.manager.getIdentifier()\r\n        );\r\n        // Add it to the dom.\r\n        nipple.add();\r\n        // Store it in idles.\r\n        self.idles.push(nipple);\r\n    }\r\n};\r\n\r\n// Nipple Factory\r\nCollection.prototype.createNipple = function (position, identifier) {\r\n    var self = this;\r\n    var scroll = u.getScroll();\r\n    var toPutOn = {};\r\n    var opts = self.options;\r\n\r\n    if (position.x && position.y) {\r\n        toPutOn = {\r\n            x: position.x -\r\n                (scroll.x + self.box.left),\r\n            y: position.y -\r\n                (scroll.y + self.box.top)\r\n        };\r\n    } else if (\r\n            position.top ||\r\n            position.right ||\r\n            position.bottom ||\r\n            position.left\r\n        ) {\r\n\r\n        // We need to compute the position X / Y of the joystick.\r\n        var dumb = document.createElement('DIV');\r\n        dumb.style.display = 'hidden';\r\n        dumb.style.top = position.top;\r\n        dumb.style.right = position.right;\r\n        dumb.style.bottom = position.bottom;\r\n        dumb.style.left = position.left;\r\n        dumb.style.position = 'absolute';\r\n\r\n        opts.zone.appendChild(dumb);\r\n        var dumbBox = dumb.getBoundingClientRect();\r\n        opts.zone.removeChild(dumb);\r\n\r\n        toPutOn = position;\r\n        position = {\r\n            x: dumbBox.left + scroll.x,\r\n            y: dumbBox.top + scroll.y\r\n        };\r\n    }\r\n\r\n    var nipple = new Nipple(self, {\r\n        color: opts.color,\r\n        size: opts.size,\r\n        threshold: opts.threshold,\r\n        fadeTime: opts.fadeTime,\r\n        dataOnly: opts.dataOnly,\r\n        restOpacity: opts.restOpacity,\r\n        mode: opts.mode,\r\n        identifier: identifier,\r\n        position: position,\r\n        zone: opts.zone,\r\n        frontPosition: {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    });\r\n\r\n    if (!opts.dataOnly) {\r\n        u.applyPosition(nipple.ui.el, toPutOn);\r\n        u.applyPosition(nipple.ui.front, nipple.frontPosition);\r\n    }\r\n    self.nipples.push(nipple);\r\n    self.trigger('added ' + nipple.identifier + ':added', nipple);\r\n    self.manager.trigger('added ' + nipple.identifier + ':added', nipple);\r\n\r\n    self.bindNipple(nipple);\r\n\r\n    return nipple;\r\n};\r\n\r\nCollection.prototype.updateBox = function () {\r\n    var self = this;\r\n    self.box = self.options.zone.getBoundingClientRect();\r\n};\r\n\r\nCollection.prototype.bindNipple = function (nipple) {\r\n    var self = this;\r\n    var type;\r\n    // Bubble up identified events.\r\n    var handler = function (evt, data) {\r\n        // Identify the event type with the nipple's id.\r\n        type = evt.type + ' ' + data.id + ':' + evt.type;\r\n        self.trigger(type, data);\r\n    };\r\n\r\n    // When it gets destroyed.\r\n    nipple.on('destroyed', self.onDestroyed.bind(self));\r\n\r\n    // Other events that will get bubbled up.\r\n    nipple.on('shown hidden rested dir plain', handler);\r\n    nipple.on('dir:up dir:right dir:down dir:left', handler);\r\n    nipple.on('plain:up plain:right plain:down plain:left', handler);\r\n};\r\n\r\nCollection.prototype.pressureFn = function (touch, nipple, identifier) {\r\n    var self = this;\r\n    var previousPressure = 0;\r\n    clearInterval(self.pressureIntervals[identifier]);\r\n    // Create an interval that will read the pressure every 100ms\r\n    self.pressureIntervals[identifier] = setInterval(function () {\r\n        var pressure = touch.force || touch.pressure ||\r\n            touch.webkitForce || 0;\r\n        if (pressure !== previousPressure) {\r\n            nipple.trigger('pressure', pressure);\r\n            self.trigger('pressure ' +\r\n                nipple.identifier + ':pressure', pressure);\r\n            previousPressure = pressure;\r\n        }\r\n    }.bind(self), 100);\r\n};\r\n\r\nCollection.prototype.onstart = function (evt) {\r\n    var self = this;\r\n    var opts = self.options;\r\n    evt = u.prepareEvent(evt);\r\n\r\n    // Update the box position\r\n    self.updateBox();\r\n\r\n    var process = function (touch) {\r\n        // If we can create new nipples\r\n        // meaning we don't have more active nipples than we should.\r\n        if (self.actives.length < opts.maxNumberOfNipples) {\r\n            self.processOnStart(touch);\r\n        }\r\n    };\r\n\r\n    u.map(evt, process);\r\n\r\n    // We ask upstream to bind the document\r\n    // on 'move' and 'end'\r\n    self.manager.bindDocument();\r\n    return false;\r\n};\r\n\r\nCollection.prototype.processOnStart = function (evt) {\r\n    var self = this;\r\n    var opts = self.options;\r\n    var indexInIdles;\r\n    var identifier = self.manager.getIdentifier(evt);\r\n    var pressure = evt.force || evt.pressure || evt.webkitForce || 0;\r\n    var position = {\r\n        x: evt.pageX,\r\n        y: evt.pageY\r\n    };\r\n\r\n    var nipple = self.getOrCreate(identifier, position);\r\n\r\n    // Update its touch identifier\r\n    nipple.identifier = identifier;\r\n\r\n    var process = function (nip) {\r\n        // Trigger the start.\r\n        nip.trigger('start', nip);\r\n        self.trigger('start ' + nip.id + ':start', nip);\r\n\r\n        nip.show();\r\n        if (pressure > 0) {\r\n            self.pressureFn(evt, nip, nip.identifier);\r\n        }\r\n        // Trigger the first move event.\r\n        self.processOnMove(evt);\r\n    };\r\n\r\n    // Transfer it from idles to actives.\r\n    if ((indexInIdles = self.idles.indexOf(nipple)) >= 0) {\r\n        self.idles.splice(indexInIdles, 1);\r\n    }\r\n\r\n    // Store the nipple in the actives array\r\n    self.actives.push(nipple);\r\n    self.ids.push(nipple.identifier);\r\n\r\n    if (opts.mode !== 'semi') {\r\n        process(nipple);\r\n    } else {\r\n        // In semi we check the distance of the touch\r\n        // to decide if we have to reset the nipple\r\n        var distance = u.distance(position, nipple.position);\r\n        if (distance <= opts.catchDistance) {\r\n            process(nipple);\r\n        } else {\r\n            nipple.destroy();\r\n            self.processOnStart(evt);\r\n            return;\r\n        }\r\n    }\r\n\r\n    return nipple;\r\n};\r\n\r\nCollection.prototype.getOrCreate = function (identifier, position) {\r\n    var self = this;\r\n    var opts = self.options;\r\n    var nipple;\r\n\r\n    // If we're in static or semi, we might already have an active.\r\n    if (/(semi|static)/.test(opts.mode)) {\r\n        // Get the active one.\r\n        // TODO: Multi-touche for semi and static will start here.\r\n        // Return the nearest one.\r\n        nipple = self.idles[0];\r\n        if (nipple) {\r\n            self.idles.splice(0, 1);\r\n            return nipple;\r\n        }\r\n\r\n        if (opts.mode === 'semi') {\r\n            // If we're in semi mode, we need to create one.\r\n            return self.createNipple(position, identifier);\r\n        }\r\n\r\n        console.warn('Coudln\\'t find the needed nipple.');\r\n        return false;\r\n    }\r\n    // In dynamic, we create a new one.\r\n    nipple = self.createNipple(position, identifier);\r\n    return nipple;\r\n};\r\n\r\nCollection.prototype.processOnMove = function (evt) {\r\n    var self = this;\r\n    var opts = self.options;\r\n    var identifier = self.manager.getIdentifier(evt);\r\n    var nipple = self.nipples.get(identifier);\r\n\r\n    if (!nipple) {\r\n        // This is here just for safety.\r\n        // It shouldn't happen.\r\n        console.error('Found zombie joystick with ID ' + identifier);\r\n        self.manager.removeIdentifier(identifier);\r\n        return;\r\n    }\r\n\r\n    nipple.identifier = identifier;\r\n\r\n    var size = nipple.options.size / 2;\r\n    var pos = {\r\n        x: evt.pageX,\r\n        y: evt.pageY\r\n    };\r\n\r\n    var dist = u.distance(pos, nipple.position);\r\n    var angle = u.angle(pos, nipple.position);\r\n    var rAngle = u.radians(angle);\r\n    var force = dist / size;\r\n\r\n    // If distance is bigger than nipple's size\r\n    // we clamp the position.\r\n    if (dist > size) {\r\n        dist = size;\r\n        pos = u.findCoord(nipple.position, dist, angle);\r\n    }\r\n\r\n    nipple.frontPosition = {\r\n        x: pos.x - nipple.position.x,\r\n        y: pos.y - nipple.position.y\r\n    };\r\n\r\n    if (!opts.dataOnly) {\r\n        u.applyPosition(nipple.ui.front, nipple.frontPosition);\r\n    }\r\n\r\n    // Prepare event's datas.\r\n    var toSend = {\r\n        identifier: nipple.identifier,\r\n        position: pos,\r\n        force: force,\r\n        pressure: evt.force || evt.pressure || evt.webkitForce || 0,\r\n        distance: dist,\r\n        angle: {\r\n            radian: rAngle,\r\n            degree: angle\r\n        },\r\n        instance: nipple\r\n    };\r\n\r\n    // Compute the direction's datas.\r\n    toSend = nipple.computeDirection(toSend);\r\n\r\n    // Offset angles to follow units circle.\r\n    toSend.angle = {\r\n        radian: u.radians(180 - angle),\r\n        degree: 180 - angle\r\n    };\r\n\r\n    // Send everything to everyone.\r\n    nipple.trigger('move', toSend);\r\n    self.trigger('move ' + nipple.id + ':move', toSend);\r\n};\r\n\r\nCollection.prototype.processOnEnd = function (evt) {\r\n    var self = this;\r\n    var opts = self.options;\r\n    var identifier = self.manager.getIdentifier(evt);\r\n    var nipple = self.nipples.get(identifier);\r\n    var removedIdentifier = self.manager.removeIdentifier(nipple.identifier);\r\n\r\n    if (!nipple) {\r\n        return;\r\n    }\r\n\r\n    if (!opts.dataOnly) {\r\n        nipple.hide(function () {\r\n            if (opts.mode === 'dynamic') {\r\n                nipple.trigger('removed', nipple);\r\n                self.trigger('removed ' + nipple.id + ':removed', nipple);\r\n                self.manager\r\n                    .trigger('removed ' + nipple.id + ':removed', nipple);\r\n                nipple.destroy();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Clear the pressure interval reader\r\n    clearInterval(self.pressureIntervals[nipple.identifier]);\r\n\r\n    // Reset the direciton of the nipple, to be able to trigger a new direction\r\n    // on start.\r\n    nipple.resetDirection();\r\n\r\n    nipple.trigger('end', nipple);\r\n    self.trigger('end ' + nipple.id + ':end', nipple);\r\n\r\n    // Remove identifier from our bank.\r\n    if (self.ids.indexOf(nipple.identifier) >= 0) {\r\n        self.ids.splice(self.ids.indexOf(nipple.identifier), 1);\r\n    }\r\n\r\n    // Clean our actives array.\r\n    if (self.actives.indexOf(nipple) >= 0) {\r\n        self.actives.splice(self.actives.indexOf(nipple), 1);\r\n    }\r\n\r\n    if (/(semi|static)/.test(opts.mode)) {\r\n        // Transfer nipple from actives to idles\r\n        // if we're in semi or static mode.\r\n        self.idles.push(nipple);\r\n    } else if (self.nipples.indexOf(nipple) >= 0) {\r\n        // Only if we're not in semi or static mode\r\n        // we can remove the instance.\r\n        self.nipples.splice(self.nipples.indexOf(nipple), 1);\r\n    }\r\n\r\n    // We unbind move and end.\r\n    self.manager.unbindDocument();\r\n\r\n    // We add back the identifier of the idle nipple;\r\n    if (/(semi|static)/.test(opts.mode)) {\r\n        self.manager.ids[removedIdentifier.id] = removedIdentifier.identifier;\r\n    }\r\n};\r\n\r\n// Remove destroyed nipple from the lists\r\nCollection.prototype.onDestroyed = function(evt, nipple) {\r\n    var self = this;\r\n    if (self.nipples.indexOf(nipple) >= 0) {\r\n        self.nipples.splice(self.nipples.indexOf(nipple), 1);\r\n    }\r\n    if (self.actives.indexOf(nipple) >= 0) {\r\n        self.actives.splice(self.actives.indexOf(nipple), 1);\r\n    }\r\n    if (self.idles.indexOf(nipple) >= 0) {\r\n        self.idles.splice(self.idles.indexOf(nipple), 1);\r\n    }\r\n    if (self.ids.indexOf(nipple.identifier) >= 0) {\r\n        self.ids.splice(self.ids.indexOf(nipple.identifier), 1);\r\n    }\r\n\r\n    // Remove the identifier from our bank\r\n    self.manager.removeIdentifier(nipple.identifier);\r\n\r\n    // We unbind move and end.\r\n    self.manager.unbindDocument();\r\n};\r\n\r\n// Cleanly destroy the manager\r\nCollection.prototype.destroy = function () {\r\n    var self = this;\r\n    self.unbindEvt(self.options.zone, 'start');\r\n\r\n    // Destroy nipples.\r\n    self.nipples.forEach(function(nipple) {\r\n        nipple.destroy();\r\n    });\r\n\r\n    // Clean 3DTouch intervals.\r\n    for (var i in self.pressureIntervals) {\r\n        if (self.pressureIntervals.hasOwnProperty(i)) {\r\n            clearInterval(self.pressureIntervals[i]);\r\n        }\r\n    }\r\n\r\n    // Notify the manager passing the instance\r\n    self.trigger('destroyed', self.nipples);\r\n    // We unbind move and end.\r\n    self.manager.unbindDocument();\r\n    // Unbind everything.\r\n    self.off();\r\n};\r\n/* global u, Super, Collection */\r\n\r\n///////////////////////\r\n///     MANAGER     ///\r\n///////////////////////\r\n\r\nfunction Manager (options) {\r\n    var self = this;\r\n    self.ids = {};\r\n    self.index = 0;\r\n    self.collections = [];\r\n\r\n    self.config(options);\r\n    self.prepareCollections();\r\n\r\n    // Listen for resize, to reposition every joysticks\r\n    var resizeTimer;\r\n    u.bindEvt(window, 'resize', function (evt) {\r\n        clearTimeout(resizeTimer);\r\n        resizeTimer = setTimeout(function () {\r\n            var pos;\r\n            var scroll = u.getScroll();\r\n            self.collections.forEach(function (collection) {\r\n                collection.forEach(function (nipple) {\r\n                    pos = nipple.el.getBoundingClientRect();\r\n                    nipple.position = {\r\n                        x: scroll.x + pos.left,\r\n                        y: scroll.y + pos.top\r\n                    };\r\n                });\r\n            });\r\n        }, 100);\r\n    });\r\n\r\n    return self.collections;\r\n};\r\n\r\nManager.prototype = new Super();\r\nManager.constructor = Manager;\r\n\r\nManager.prototype.prepareCollections = function () {\r\n    var self = this;\r\n    // Public API Preparation.\r\n    self.collections.create = self.create.bind(self);\r\n    // Listen to anything\r\n    self.collections.on = self.on.bind(self);\r\n    // Unbind general events\r\n    self.collections.off = self.off.bind(self);\r\n    // Destroy everything\r\n    self.collections.destroy = self.destroy.bind(self);\r\n    // Get any nipple\r\n    self.collections.get = function (id) {\r\n        var nipple;\r\n        self.collections.every(function (collection) {\r\n            if (nipple = collection.get(id)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return nipple;\r\n    };\r\n};\r\n\r\nManager.prototype.create = function (options) {\r\n    return this.createCollection(options);\r\n};\r\n\r\n// Collection Factory\r\nManager.prototype.createCollection = function (options) {\r\n    var self = this;\r\n    var collection = new Collection(self, options);\r\n\r\n    self.bindCollection(collection);\r\n    self.collections.push(collection);\r\n\r\n    return collection;\r\n};\r\n\r\nManager.prototype.bindCollection = function (collection) {\r\n    var self = this;\r\n    var type;\r\n    // Bubble up identified events.\r\n    var handler = function (evt, data) {\r\n        // Identify the event type with the nipple's identifier.\r\n        type = evt.type + ' ' + data.id + ':' + evt.type;\r\n        self.trigger(type, data);\r\n    };\r\n\r\n    // When it gets destroyed we clean.\r\n    collection.on('destroyed', self.onDestroyed.bind(self));\r\n\r\n    // Other events that will get bubbled up.\r\n    collection.on('shown hidden rested dir plain', handler);\r\n    collection.on('dir:up dir:right dir:down dir:left', handler);\r\n    collection.on('plain:up plain:right plain:down plain:left', handler);\r\n};\r\n\r\nManager.prototype.bindDocument = function () {\r\n    var self = this;\r\n    // Bind only if not already binded\r\n    if (!self.binded) {\r\n        self.bindEvt(document, 'move')\r\n            .bindEvt(document, 'end');\r\n        self.binded = true;\r\n    }\r\n};\r\n\r\nManager.prototype.unbindDocument = function (force) {\r\n    var self = this;\r\n    // If there are no touch left\r\n    // unbind the document.\r\n    if (!Object.keys(self.ids).length || force === true) {\r\n        self.unbindEvt(document, 'move')\r\n            .unbindEvt(document, 'end');\r\n        self.binded = false;\r\n    }\r\n};\r\n\r\nManager.prototype.getIdentifier = function (evt) {\r\n    var id;\r\n    // If no event, simple increment\r\n    if (!evt) {\r\n        id = this.index;\r\n    } else {\r\n        // Extract identifier from event object.\r\n        // Unavailable in mouse events so replaced by latest increment.\r\n        id = evt.identifier === undefined ? evt.pointerId : evt.identifier;\r\n        if (id === undefined) {\r\n            id = this.latest || 0;\r\n        }\r\n    }\r\n\r\n    if (this.ids[id] === undefined) {\r\n        this.ids[id] = this.index;\r\n        this.index += 1;\r\n    }\r\n\r\n    // Keep the latest id used in case we're using an unidentified mouseEvent\r\n    this.latest = id;\r\n    return this.ids[id];\r\n};\r\n\r\nManager.prototype.removeIdentifier = function (identifier) {\r\n    var removed = {};\r\n    for (var id in this.ids) {\r\n        if (this.ids[id] === identifier) {\r\n            removed.id = id;\r\n            removed.identifier = this.ids[id];\r\n            delete this.ids[id];\r\n            break;\r\n        }\r\n    }\r\n    return removed;\r\n};\r\n\r\nManager.prototype.onmove = function (evt) {\r\n    var self = this;\r\n    self.onAny('move', evt);\r\n    return false;\r\n};\r\n\r\nManager.prototype.onend = function (evt) {\r\n    var self = this;\r\n    self.onAny('end', evt);\r\n    return false;\r\n};\r\n\r\nManager.prototype.onAny = function (which, evt) {\r\n    var self = this;\r\n    var id;\r\n    var processFn = 'processOn' + which.charAt(0).toUpperCase() +\r\n        which.slice(1);\r\n    evt = u.prepareEvent(evt);\r\n    var processColl = function (e, id, coll) {\r\n        if (coll.ids.indexOf(id) >= 0) {\r\n            coll[processFn](e);\r\n            // Mark the event to avoid cleaning it later.\r\n            e._found_ = true;\r\n        }\r\n    };\r\n    var processEvt = function (e) {\r\n        id = self.getIdentifier(e);\r\n        u.map(self.collections, processColl.bind(null, e, id));\r\n        // If the event isn't handled by any collection,\r\n        // we need to clean its identifier.\r\n        if (!e._found_) {\r\n            self.removeIdentifier(id);\r\n        }\r\n    };\r\n\r\n    u.map(evt, processEvt);\r\n\r\n    return false;\r\n};\r\n\r\n// Cleanly destroy the manager\r\nManager.prototype.destroy = function () {\r\n    var self = this;\r\n    self.unbindDocument(true);\r\n    self.ids = {};\r\n    self.index = 0;\r\n    self.collections.forEach(function(collection) {\r\n        collection.destroy();\r\n    });\r\n    self.off();\r\n};\r\n\r\n// When a collection gets destroyed\r\n// we clean behind.\r\nManager.prototype.onDestroyed = function (evt, coll) {\r\n    var self = this;\r\n    if (self.collections.indexOf(coll) < 0) {\r\n        return false;\r\n    }\r\n    self.collections.splice(self.collections.indexOf(coll), 1);\r\n};\r\nvar factory = new Manager();\r\nreturn {\r\n    create: function (options) {\r\n        return factory.create(options);\r\n    },\r\n    factory: factory\r\n};\r\n\r\n});\r\n"}},[3]);
//# sourceMappingURL=scripts.8582dcb566d6d175059e.bundle.js.map